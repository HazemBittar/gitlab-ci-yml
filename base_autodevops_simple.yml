#

include:
  - /base_azure_db_stage.yml
  - /base_create_namespace_stage.yml
  - /base_delete_useless_k8s_ns_stage.yml
  - /base_deploy_app_chart_stage.yml
  - /base_deploy_kosko_stage.yml
  - /base_docker_helm_image_stage.yml
  - /base_docker_kubectl_image_stage.yml
  - /base_notify_github_stage.yml
  - /base_register_stage.yml
  - /base_semantic_release_stage.yml
  - /base_trigger_stage.yml
  - /base_yarn_stage.yml

#

workflow:
  rules:
    # Skip GitHub pull requests pipelines
    - if: "$CI_PIPELINE_SOURCE == 'external_pull_request_event'"
      when: never
    # - if: "$CI_COMMIT_TAG"
    #   when: never
    - if: $CI_COMMIT_MESSAGE =~ /^chore\(release\)/ && $CI_COMMIT_TAG == null
      when: never
    # Otherwise include the job and set to run normally
    - when: always

#

stages:
  - Install
  - Quality check
  - Build
  - Registration
  - Release
  - Deploy

#

variables:
  GIT_STRATEGY: fetch
  GIT_DEPTH: 5
  #
  AUTO_DEVOPS_DEV_ENVIRONMENT_NAME: "-dev2"
  AUTO_DEVOPS_PREPROD_ENVIRONMENT_NAME: "-dev2"
  AUTO_DEVOPS_PROD_ENVIRONMENT_NAME: "prod2"
  # To activate the auto release
  # AUTO_DEVOPS_RELEASE_AUTO: "ðŸ”–"
  # AUTO_DEVOPS_PRODUCTION_AUTO: "ðŸš€"
  # To disable quality check jobs
  # AUTO_DEVOPS_QUALITY_CHECK_DISABLED: "ðŸ›‘"
  # AUTO_DEVOPS_TEST_DISABLED: "ðŸ›‘"
  # AUTO_DEVOPS_LINT_DISABLED: "ðŸ›‘"

#
#
#

# .production_rule: &autodevops_production_rule
#   if: "$PRODUCTION && $CI_COMMIT_TAG"
# .trigger_rule: &autodevops_trigger_rule
#   if: "$PRODUCTION || $RELEASE"
# .release_trigger_rule: &autodevops_on_feature_branch
#   if: '$CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "alpha" && $CI_COMMIT_BRANCH != "beta"'
# .release_trigger_rule2: &autodevops_on_release
#   if: '$CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE =~ /^chore(release): version/'
# .master_trigger_rule: &autodevops_master_trigger_rule
#   if: "$CI_COMMIT_BRANCH == 'alpha' && $AUTO_DEVOPS_RELEASE_AUTO && $CI_COMMIT_MESSAGE !~ /chore(release)/"

.rule_before_release: &rule_before_release
  # if: $CI_COMMIT_BRANCH == 'master' && $AUTO_DEVOPS_RELEASE_AUTO && $CI_COMMIT_MESSAGE !~ /^chore\(release\)/
  if: $CI_COMMIT_BRANCH == 'master' && $AUTO_DEVOPS_RELEASE_AUTO
.rule_on_release: &rule_on_release
  # if: $CI_COMMIT_BRANCH == 'master' && $AUTO_DEVOPS_RELEASE_AUTO && $CI_COMMIT_MESSAGE =~ /^chore\(release\)/
  if: $CI_COMMIT_TAG && $AUTO_DEVOPS_RELEASE_AUTO && $PRODUCTION == null
.rule_on_release: &rule_on_feature_branch
  if: $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TAG == null

##############################
# Install
##############################

.autodevops_install:
  stage: Install
  extends:
    - .base_yarn
  interruptible: true

Cache setup:
  extends:
    - .autodevops_install
  rules:
    - <<: *rule_before_release
      when: never
    - when: always

##############################
# Lint
##############################

.autodevops_lint:
  stage: Quality check
  rules:
    - <<: *rule_before_release
      when: never
    - if: $AUTO_DEVOPS_QUALITY_CHECK_DISABLED
      when: never
    - if: $AUTO_DEVOPS_LINT_DISABLED
      when: never
    - when: on_success
  extends:
    - .base_yarn_script
  needs:
    - job: Cache setup
      artifacts: true
  script:
    - yarn lint

##############################
# Test
##############################

.autodevops_test:
  stage: Quality check
  rules:
    - <<: *rule_before_release
      when: never
    - if: $AUTO_DEVOPS_QUALITY_CHECK_DISABLED
      when: never
    - if: "$AUTO_DEVOPS_TEST_DISABLED"
      when: never
    - when: on_success
  extends:
    - .base_yarn_script
  needs:
    - job: Cache setup
      artifacts: true
  script:
    - yarn test

##############################
# Build
##############################

.autodevops_build:
  stage: Build
  extends:
    - .base_yarn_build_next
  dependencies:
    - Cache setup
    - Lint
    - Test
  rules:
    - <<: *rule_before_release
      when: never
    - when: on_success

# ##############################
# # Tag
# ##############################

# .autodevops_get_tag:
#   stage: Build
#   extends:
#     - .base_yarn_script
#   script:
#     - echo "CI_COMMIT_TAG=v$(node -p "require('./package.json').version")" >> build.env
#     - cat build.env
#   artifacts:
#     reports:
#       dotenv: build.env

# Get tag:
#   extends:
#     - .autodevops_get_tag
#   rules:
#     - <<: *rule_on_release
#       when: on_success
#     - when: never

##############################
# Register
##############################

.autodevops_register_image:
  stage: Registration
  extends:
    - .base_register_stage
  variables:
    CONTEXT: .
    IMAGE_NAME: $CI_REGISTRY_IMAGE
  rules:
    - <<: *rule_before_release
      when: never
    - when: on_success

##############################
# Register Feature Branch
##############################

Register app:
  extends: .autodevops_register_image
  needs:
    - job: Build
      artifacts: true
  variables:
    DOCKER_BUILD_ARGS: >-
      --shm-size 512M
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app
  rules:
    - <<: *rule_on_feature_branch
      when: on_success
    - when: never

##############################
# Register Release
##############################

Register release:
  extends: .autodevops_register_image
  needs:
    - job: Build
      artifacts: true
    # - job: Get tag
    #   artifacts: true
  variables:
    DOCKER_BUILD_ARGS: >-
      --shm-size 512M
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app
  rules:
    - <<: *rule_on_release
      when: on_success
    - when: never

##############################
# Notify Deployment Start
##############################

.autodevops_notify_starting_deployment:
  stage: Deploy
  extends:
    - .base_notify_pending_stage
  allow_failure: true
  rules:
    - <<: *rule_before_release
      when: never
    - when: on_success
  # rules:
  #   - if: $RELEASE
  #     when: never
  #   - when: on_success

Notify Start:
  extends: .autodevops_notify_starting_deployment

##############################
# Deploy
##############################

.deploy_stage:
  stage: Deploy
  extends:
    - .base_deploy_kosko_stage
  cache:
    key: deploy-${CI_COMMIT_REF_SLUG}
    paths:
      - ${CI_PROJECT_DIR}/dotenv.env
      - ${CI_PROJECT_DIR}/.cache
      - ${K8S_FOLDER}/node_modules
  after_script:
    - echo "CI_ENVIRONMENT_URL=${CI_ENVIRONMENT_URL}" >> dotenv.env

##############################
# Deploy REVIEW
##############################

.autodevops_review:
  extends:
    - .deploy_stage
  # rules:
  #   - if: "$PRODUCTION || $RELEASE || $CI_COMMIT_TAG"
  #     when: never
  #   - <<: *autodevops_master_trigger_rule
  #     when: never
  #   - when: on_success
  variables:
    KOSKO_APPEND_YAML_FROM: .k8s/environments/dev/manifests
    KOSKO_GENERATE_ARGS: >-
      --env dev
  environment:
    auto_stop_in: 1 day
    name: ${CI_COMMIT_REF_NAME}${AUTO_DEVOPS_DEV_ENVIRONMENT_NAME}
    on_stop: Stop review
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}

Deploy review:
  extends: .autodevops_review
  rules:
    - <<: *rule_on_feature_branch
      when: on_success
    - when: never

##############################
# Deploy PREPROD
##############################

.autodevops_preprod:
  extends:
    #   - .deploy_stage
    - .autodevops_review
  # stage: Deploy
  needs:
    - job: Register release
    # - job: Get tag
    #   artifacts: true
  # rules:
  # - if: "$PRODUCTION || $RELEASE"
  #   when: never
  # - if: "$CI_COMMIT_TAG"
  variables:
    KOSKO_APPEND_YAML_FROM: .k8s/environments/preprod/manifests
    KOSKO_GENERATE_ARGS: >-
      --env preprod
  environment:
    auto_stop_in: 1 week
    name: preprod${AUTO_DEVOPS_PREPROD_ENVIRONMENT_NAME}
    on_stop: Stop preprod
    url: https://preprod-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}

Deploy preprod:
  extends: .autodevops_preprod
  rules:
    - <<: *rule_on_release
      when: on_success
    - when: never

# ##############################
# # Trigger Release
# ##############################

# .autodevops_trigger_release:
#   extends:
#     - .base_trigger_release_stage
#     # - .autodevops_base_rules
#   stage: .post
#   rules:
#     - <<: *rule_on_feature_branch
#       when: always
#     - when: never
#   # rules:
#   #   - <<: *autodevops_global_skip_case
#   #   - <<: *autodevops_on_feature_branch
#   #     when: never
#   #   - <<: *autodevops_on_release
#   #     when: never
#   #   - if: "$CI_COMMIT_TAG"
#   #     when: never
#   #   - if: "$AUTO_DEVOPS_RELEASE_AUTO && $CI_COMMIT_BRANCH == 'master'"
#   #     when: never
#   #   - if: "$AUTO_DEVOPS_RELEASE_AUTO && $CI_COMMIT_MESSAGE !~ /^chore(release): version/"
#   #     when: on_success
#   #   - when: manual

# Trigger release:
#   extends: .autodevops_trigger_release

##############################
# Trigger PRODUCTION
##############################

.autodevops_trigger_production:
  stage: .post
  rules:
    - <<: *rule_on_release
      when: manual
    - when: never
  # rules:
  #   - if: "$PRODUCTION"
  #     when: never
  #   - if: $CI_COMMIT_TAG && $AUTO_DEVOPS_PRODUCTION_AUTO && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  #     when: on_success
  #   - if: "$CI_COMMIT_TAG"
  #     when: manual
  extends: .base_trigger_production_stage

Ship to prod:
  extends: .autodevops_trigger_production

##############################
# Deploy PRODUCTION
##############################

.autodevops_production:
  extends:
    - .deploy_stage
  rules:
    - <<: *autodevops_production_rule
  variables:
    KOSKO_APPEND_YAML_FROM: .k8s/environments/prod/manifests
    KUBE_NAMESPACE: ${CI_PROJECT_NAME}
    KOSKO_GENERATE_ARGS: >-
      --env prod "!(_*)"
  environment:
    name: ${AUTO_DEVOPS_PROD_ENVIRONMENT_NAME}
    url: https://${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}

Production:
  extends: .autodevops_production

##############################
# Stop REVIEW
##############################

.autodevops_stop_review:
  extends:
    - .base_docker_kubectl_image_stage
  stage: .post
  # rules:
  #   - if: "$PRODUCTION || $RELEASE || $CI_COMMIT_TAG"
  #     when: never
  #   - <<: *autodevops_master_trigger_rule
  #     when: never
  #   - when: manual
  environment:
    name: ${CI_COMMIT_REF_NAME}${AUTO_DEVOPS_DEV_ENVIRONMENT_NAME}
    action: stop
  allow_failure: true
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - echo "kubectl delete namespace ${KUBE_NAMESPACE}"
    - kubectl delete namespace "${KUBE_NAMESPACE}"

Stop review:
  extends: .autodevops_stop_review
  rules:
    - <<: *rule_on_feature_branch
      when: manual
    - when: never

##############################
# Stop PREPROD
##############################

.autodevops_stop_preprod:
  extends:
    - .autodevops_stop_review
  environment:
    name: preprod${AUTO_DEVOPS_PREPROD_ENVIRONMENT_NAME}
    action: stop
  rules:
    - <<: *rule_on_release
      when: manual
    - when: never
  # rules:
  #   - if: "$PRODUCTION || $RELEASE"
  #     when: never
  #   - if: "$CI_COMMIT_TAG"
  #     when: manual

Stop preprod:
  extends: .autodevops_stop_preprod

##############################
# Notify
##############################

.notify:
  dependencies:
    - Notify Start
  allow_failure: true
  cache:
    key: deploy-${CI_COMMIT_REF_SLUG}
    paths:
      - ${CI_PROJECT_DIR}/dotenv.env
    policy: pull
  before_script:
    - |
      set -x

      . dotenv.env

      export HOST=$CI_ENVIRONMENT_URL

##############################
# Notify Fail
##############################

.autodevops_notify_fail:
  stage: .post
  extends:
    - .base_notify_fail_stage
    - .notify
  rules:
    - <<: *rule_before_release
      when: never
    - when: on_failure
  # script:
  #   - echo pouet fail
  # rules:
  #   - if: "$RELEASE"
  #     when: never
  #   - when: on_failure

Notify fail:
  extends: .autodevops_notify_fail

##############################
# Notify Success
##############################

.autodevops_notify_success:
  stage: .post
  extends:
    - .base_notify_success_stage
    - .notify
  rules:
    - <<: *rule_before_release
      when: never
    - when: on_success
  # script:
  #   - echo pouet success
  # rules:
  #   - if: "$RELEASE"
  #     when: never
  #   - when: on_success

Notify success:
  extends: .autodevops_notify_success

##############################
# Release
##############################

.autodevops_release:
  extends:
    - .base_semantic_release_stage
  rules:
    - <<: *rule_before_release
      when: always
    - when: never
  # rules:
  #   # - <<: *autodevops_release_trigger_rule
  #   #   when: never
  #   # - <<: *autodevops_release_trigger_rule2
  #   #   when: never
  #   - <<: *autodevops_master_trigger_rule
  #     when: always
  variables:
    GIT_DEPTH: 4242
    SEMANTIC_RELEASE_ARGS: ""
  stage: Release

Release:
  extends: .autodevops_release
